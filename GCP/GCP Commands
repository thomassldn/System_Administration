#GCP Commands
# 8 Nov 2022

General Comands
==========================
$ python3 -c 'import base64; import os; print(base64.encodebytes(os.urandom(32)))'     (create a AES-256 base-64 key e.g.  b'tmxElCaabWvJqR7uXEWQF39DhWTcDvChzuCmpHe6sb0=\n')

Configuration
==========================
$ export LOCATION=US                                                               (create an environment variable with your location, where location is US, EU, or ASIA)
$ gcloud auth list                                                                 (list active account name)
$ gcloud config list                                                               (view general config info)
$ gcloud config set compute/region us-central1                                     (set the compute zone)
$ gcloud compute regions list                                                      (list regions)
$ MYREGION=[YOUR_REGION]                                                           (create a variable with your region)

CLI 
===========================
$ gcloud -h                                            (get a list of available CLI commands)
$ gcloud init                                          (after you install the CLI, run this command to perform the initial setup or change settings or create a new configuration)
$ gcloud auth login                                    (an alternative to gcloud init, authorize with a user account without setting up a configuration)


Compute 
===========================
$ gcloud compute instances get-serial-port-output <INSTANCE> --zone=us-central1-b         (read output from a virtual machine instance's serial port)        
$ gcloud compute instances list                         (list compute instances)
$ gcloud compute instances create <VM_NAME> --zone=<ZONE> --machine-type=e2-micro --subnet=<SUBNET> --image-family=debian-11 --image-project=debian-cloud --boot-disk-size=10GB --boot-disk-type=pd-standard --boot-disk-device-name=<DISK_NAME>    (create a VM with specs)
$ gcloud compute instances move                                                        (move instance to a different zone within a region)
$ gcloud compute instances create <VM_NAME --zone us-central1-b --subnet <VPC_Subnet>   (create a VM instance in a subnet)
$ gcloud compute instances import <VM_NAME> --source-uri=gs://<BUCKET>/<BUCKET_NAME> --network <NETWORK> --subnet <SUBNET>
$ gcloud compute instances import net-lax3-1k-agent --source-uri=gs://thousandeyes-va-0230_ova_file/thousandeyes-va-0.230.ova --network ucr-its-vpc-01 --subnet shared-services


Firewall
===========================
$ gcloud compute firewall-rules create <NETWORK>-allow-icmp-ssh-rdp --direction=INGRESS --priority=1000 --network=<NETWORK> --action=ALLOW --rules=icmp,tcp:22,tcp:3389 --source-ranges=0.0.0.0/0
$ gcloud compute firewall-rules list --sort-by=NETWORK (list all firewall rules sorted by VPC Network)


Google Kubernetes Engine 
===========================
$ kubectl version                                       (get installed version of kubernetes)
$ kubectl get pods                                       (get pods in a cluster )
$ kubectl get services                                   (get services running in GKE)
$ export MY_ZONE=us-central1-a                         (initialize an environment variable with  your zone)
$ gcloud container clusters create <container_name> --zone $MY_ZONE --num-nodes 2   (create a cluster and configure it to run 2 nodes)
$ kubectl create deploy nginx --image=nginx:1.17.10     (create a nginx contaner that runs on a pod,  with deployement of 1)
$ kubectl expose deployment nginx --port 80 --type LoadBalancer  (expose teh nginx container to the internet)
$ kubectl scale deployment nginx --replicas 3                  (scale your deployement running your service to 3 pods )

IAM
=========================
$ glcoud iam service-accounts keys list --iam-account  <user>@<email>.com        (list all of the keys associated with a Service Account)


Networking
=========================
$ gcloud compute networks list                                      (view available PVC networks)
$ gcloud compute networks subnets list --sort-by=<Network>          (list the available VPC subnets (sorted by VPC networ))
$ gcloud compute networks create <VPC_NETWORK> --subnet-mode custom    (create custom VPC network)
$ gcloud compute networks subnets create <VPC_SUBNET1> --network <VPC_NETWORK> --range 10.1.1.0/24 --region us-central1    (createa subnet in the VPC)
$ gcloud compute networks subnets create <VPC_SUBNET1> --network <VPC_NETWORK> --range 10.2.1.0/24 --region us-east1      ((createa a second subnet in the same VPC))
$ gcloud compute firewall-rules create vpc-demo-allow-custom --network <VPC_NETWORK> --allow tcp:0-65535,udp:0-65535,icmp --source-ranges 10.0.0.0/8  (make firewall rule to allow all traffic between networks)
$ gcloud compute firewall-rules create vpc-demo-allow-ssh-icmp --network <VPC_NETWORK> --allow tcp:22,icmp                (Create a firewall rule to allow SSH, ICMP traffic from anywhere)


Projects
=========================
$ gcloud projects list                                                              (list all projects)
$ gcloud config list project                                                       (get project and project id)


Cloud Storage
=========================
$ gsutil mb gs://<BUCKET_NAME>                                                      (create a bucket)
$ gsutil mb -l $LOCATION gs://$DEVSHELL_PROJECT_ID                                  (create a bucket that has your project id name)
$ gsutil cp gs://cloud-training/gcpfci/my-excellent-blog.png my-excellent-blog.png  (Retrieve/Copy a banner image from a publicly accessible Cloud Storage location)
$ gsutil cp <file>.png gs://$DEVSHELL_PROJECT_ID/<file>.png                       (Copy an image from your working dir to a cloud bucket)
$ gsutil acl ch -u allUsers:R gs://$DEVSHELL_PROJECT_ID/my-excellent-blog.png       (Modify the Access Control List of the object you just created so that it is readable by everyone)
$ gsutil signurl -d 10m /path/to/privatekey.p12 gs://bucket/object                 (access a bucket w key)
$ gsutil acl get gs://$BUCKET_NAME_1/<file>.txt  > acl.txt                         (cat acl.txt to list default access list thats been assigned to file)
$ gsutil acl set private gs://$BUCKET_NAME_1/<file>.txt                             (set access list to private)
$ gsutil acl ch -u AllUsers:R gs://$BUCKET_NAME_1/<file>.txt                        (update access list to make  the file publicly readable)
$ gsutil lifecycle get gs://$BUCKET_NAME_1                                          (view the current lifecycle policy e.g. if you want to delte the object after X days )
$ gsutil lifecycle set life.json gs://$BUCKET_NAME_1                                (set lifecycle policy via json file, which deletes files older than X days)
$ gsutil versioning get gs://$BUCKET_NAME_1                                         (get versioning of bucket,  verify versioning)
$ gsutil versioning set on gs://$BUCKET_NAME_1                                      (enable versioning on a bucket)
$ gsutil -ls -a gs://$BUCKET_NAME_1/setup.html                                      (list all versions of the file)
$ gsutil rsync -r ./firstlevel gs://$BUCKET_NAME_1/firstlevel                       (sync a bucket file in your VM)


Cloud SQL
===========================

Cloud Run 
===========================
$ gcloud services enable run.googleapis.com                                           (enable Cloud Run API)
$ gcloud builds submit --tag gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld                   (build a nodejs app container from a Dockerfile in a working directory)         
$ gcloud container images list                                                        (list container images)
$ docker run -d -p 8080:8080 gcr.io/$GOOGLE_CLOUD_PROJECT/helloworld                   (test and run container image locally on cloud shell, using curl localhost:8080)

VPN
============================
$ gcloud compute vpn-gateways create <VPC_VPN_NAME> --network <VPC> --region us-central1 (create an HA VPN in the <VPC> network)
$ gcloud compute vpn-gateways describe <VPC_VPN_NAME> --region us-central1   (View details of the <VPC_VPN_Name> vpn-gateway to verify its settings)
$ gcloud compute routers create <ROUTER_NAME> --region us-central1 --network <VPC> --asn 65001



Terraform
===========================
$ terraform --version                                                                  (verify terraform version)
$ mkdir terrfrm_dir && touch main.tf
$ terraform init                                                                       (initialize terraform backend
$ terraform plan                                                                       (plan the deployment before running terraform apply)
$ terraform apply                                                                      (deploy your infastructure with terraform)
